print("Login or Signup?")
choose = input("Please Choose: ")
current_bal = 0

if choose == "signup":
    choose = "signup"
    sign_up_username = input("Please enter your prefered username: ")
    sign_up_password = input("Please enter your Password: ")
    confirm_password = input("Please confirm your Password: ")
elif choose == "login":
    print("You don't have an account yet..")
    print("Please create a new account to continue!")
    print("Verifying..")
    exit()
else:
    print("Please enter your user and password Correctly!")

if confirm_password == sign_up_password:
    print("Account Created Successfully! ")
    print("Please log in your account")
    login_user = input("Please enter your username: ")
    login_password = input("Please enter your Password: ")
else:
    print("Please input your username and password correctly!")

if login_user != sign_up_username:
    print("Incorrect Username.. Please try again!")
    login_user
    login_password
elif login_password == sign_up_password:
    print("Welcome! User", login_user)
    print("--------- G Cash cuz yez -----------")
    print("1. User Profile ")
    print("2. Check Balance ")
    print("3. Check and Deposit Cash ")
    print("4. Withdraw Cash")
    print("5. Log out ")
    choice = input("Please choose what number you want to input: ")
else:
    print("Please input your username or password Correctly! ")

if choice == "profile":
  print("--------", login_user,"--------")
  print("Credentials:")
  print("Name: ")

elif choice == "check balance":
  print("Your Current balance is..", current_bal)

elif choice == "deposit":
  print("You don't have enough credit for you to deposit..")
  depo = input("Do you want to deposit cash into your account?(y/n): ")
  if depo == "y":
    witdro = int(input("How much cash do you want to deposit?: $"))
    total = witdro + current_bal
    current_bal = total
    print("$",witdro,"Has been added to you account and has now.. $",current_bal)
    choice2 = input("What do you want to do now?: ")
else:
  print("Please refresh")

if choice2 == "withdraw":
    withdraw = int(input("How much do you want to withdraw?: "))
    current_bal -= withdraw
    print("Your current balance is now.. $", current_bal)
else:
   print("Please try again..")

------------------------------------------------------------------------------------------------


import tkinter as tk
from tkinter import messagebox, simpledialog
import random


users = {}
pins = {}
current_bal = 0


def sign_up():
    username = entry_signup_username.get()
    password = entry_signup_password.get()
    confirm_password = entry_confirm_password.get()
    
    if password == confirm_password:
        users[username] = password
        pins[username] = None 
        messagebox.showinfo("Success", "Account created! Please log in.")
        show_login()
    else:
        messagebox.showerror("Error", "Passwords do not match!")

def log_in():
    username = entry_login_username.get()
    password = entry_login_password.get()
    
    if username in users and users[username] == password:
        if pins[username]:  

            pin_input = simpledialog.askstring("PIN Verification", "Enter your 4-digit PIN:")
            if pin_input == pins[username]:
                messagebox.showinfo("Success", "Access granted!")
                main_menu(username)
            else:
                messagebox.showerror("Error", "Incorrect PIN.")
        else:
            messagebox.showinfo("Success", f"Welcome, {username}!")
            main_menu(username)
    else:
        messagebox.showerror("Error", "Invalid username or password!")

def pin(username):
    pin = str(random.randint(1000, 9999))
    pins[username] = pin
    messagebox.showinfo("PIN Generated", f"Your PIN is: {pin}")


def check_balance(username):
    messagebox.showinfo("Balance", f"Current balance: ${current_bal}")
    main_menu(username)

def deposit(username):
    global current_bal
    amount = simpledialog.askinteger("Deposit", "Enter amount:")
    if amount:
        current_bal += amount
        messagebox.showinfo("Success", f"${amount} deposited. New balance: ${current_bal}")
    main_menu(username)

def withdraw(username):
    global current_bal
    amount = simpledialog.askinteger("Withdraw", "Enter amount:")
    if amount and amount <= current_bal:
        current_bal -= amount
        messagebox.showinfo("Success", f"${amount} withdrawn. New balance: ${current_bal}")
    else:
        messagebox.showerror("Error", "Insufficient balance.")
    main_menu(username)


root = tk.Tk() 
root.title("Login or Signup") 
root.geometry("400x400") 




def show_signup(): 
    clear_window()
    global entry_signup_username, entry_signup_password, entry_confirm_password
    tk.Label(root, text="Signup").pack()
    entry_signup_username = tk.Entry(root)
    entry_signup_password = tk.Entry(root, show="*")
    entry_confirm_password = tk.Entry(root, show="*")
    entry_signup_username.pack()
    entry_signup_password.pack()
    entry_confirm_password.pack()
    tk.Button(root, text="Create Account", command=sign_up).pack()
    tk.Button(root, text="Back", command=show_login_or_signup).pack()

def show_login():
    clear_window()
    global entry_login_username, entry_login_password
    tk.Label(root, text="Login").pack()
    entry_login_username = tk.Entry(root)
    entry_login_password = tk.Entry(root, show="*")
    entry_login_username.pack()
    entry_login_password.pack()
    tk.Button(root, text="Login", command=log_in).pack()
    tk.Button(root, text="Back", command=show_login_or_signup).pack()

def main_menu(username):
    clear_window()
    tk.Label(root, text=f"Welcome {username}!").pack()
    tk.Button(root, text="Check Balance", command=lambda: check_balance(username)).pack()
    tk.Button(root, text="Deposit", command=lambda: deposit(username)).pack()
    tk.Button(root, text="Withdraw", command=lambda: withdraw(username)).pack()
    tk.Button(root, text="Generate PIN", command=lambda: pin(username)).pack()
    tk.Button(root, text="Logout", command=log_out).pack()

def log_out():
    show_login_or_signup()

def clear_window():
    for widget in root.winfo_children():
        widget.destroy()

def show_login_or_signup():
    clear_window()
    tk.Label(root, text="Login or Signup").pack()
    tk.Button(root, text="Signup", command=show_signup).pack()
    tk.Button(root, text="Login", command=show_login).pack()

show_login_or_signup()
root.mainloop()


-----------------------------------------------------------------------------------------------------





import tkinter as tk
from tkinter import messagebox, simpledialog
import random


users = {}
pins = {}
current_bal = 0

def darkmode():
    darkmode = ""
    if darkmode == True:
        messagebox.showinfo("Darkmode Enabled!")
    show_login()

def sign_up():
    username = entry_signup_username.get()
    password = entry_signup_password.get()
    confirm_password = entry_confirm_password.get()
    
    if password == confirm_password:
        users[username] = password
        pins[username] = None 
        messagebox.showinfo("Success", "Account created! Please log in.")
        show_login()
    else:
        messagebox.showerror("Error", "Passwords do not match!")

def log_in():
    username = entry_login_username.get()
    password = entry_login_password.get()
    
    if username in users and users[username] == password:
        if pins[username]:  

            pin_input = simpledialog.askstring("PIN Verification", "Enter your 4-digit PIN:")
            if pin_input == pins[username]:
                messagebox.showinfo("Success", "Access granted!")
                main_menu(username)
            else:
                messagebox.showerror("Error", "Incorrect PIN.")
        else:
            messagebox.showinfo("Success", f"Welcome, {username}!")
            main_menu(username)
    else:
        messagebox.showerror("Error", "Invalid username or password!")

def pin(username):
    pin = str(random.randint(1000, 9999))
    pins[username] = pin
    messagebox.showinfo("PIN Generated", f"Your PIN is: {pin}")


def check_balance(username):
    messagebox.showinfo("Balance", f"Current balance: ${current_bal}")
    main_menu(username)

def deposit(username):
    global current_bal
    amount = simpledialog.askinteger("Deposit", "Enter amount:")
    if amount:
        current_bal += amount
        messagebox.showinfo("Success", f"${amount} deposited. New balance: ${current_bal}")
    main_menu(username)

def withdraw(username):
    global current_bal
    amount = simpledialog.askinteger("Withdraw", "Enter amount:")
    if amount and amount <= current_bal:
        current_bal -= amount
        messagebox.showinfo("Success", f"${amount} withdrawn. New balance: ${current_bal}")
    else:
        messagebox.showerror("Error", "Insufficient balance.")
    main_menu(username)


root = tk.Tk() 
root.title("Login or Signup") 
root.geometry("400x400") 


def show_signup(): 
    clear_window()
    global entry_signup_username, entry_signup_password, entry_confirm_password
    tk.Label(root, text="Signup").pack()
    entry_signup_username = tk.Entry(root)
    entry_signup_password = tk.Entry(root, show="*")
    entry_confirm_password = tk.Entry(root, show="*")
    entry_signup_username.pack()
    entry_signup_password.pack()
    entry_confirm_password.pack()
    tk.Button(root, text="Create Account", command=sign_up).pack()
    tk.Button(root, text="Back", command=show_login_or_signup).pack()
    

def show_login():
    clear_window()
    global entry_login_username, entry_login_password
    tk.Label(root, text="Login").pack()
    entry_login_username = tk.Entry(root)
    entry_login_password = tk.Entry(root, show="*")
    entry_login_username.pack()
    entry_login_password.pack()
    tk.Button(root, text="Login", command=log_in).pack()
    tk.Button(root, text="Back", command=show_login_or_signup).pack()
    
    

def main_menu(username):
    clear_window()
    tk.Label(root, text=f"Welcome {username}!").pack()
    tk.Button(root, text="Check Balance", command=lambda: check_balance(username)).pack()
    tk.Button(root, text="Deposit", command=lambda: deposit(username)).pack()
    tk.Button(root, text="Withdraw", command=lambda: withdraw(username)).pack()
    tk.Button(root, text="Generate PIN", command=lambda: pin(username)).pack()
    tk.Button(root, text="Logout", command=log_out).pack()

def log_out():
    show_login_or_signup()

def clear_window():
    for widget in root.winfo_children():
        widget.destroy()

def show_login_or_signup():
    clear_window()
    tk.Label(root, text="Login or Signup").pack()
    tk.Button(root, text="Signup", command=show_signup).pack()
    tk.Button(root, text="Login", command=show_login).pack()
    tk.Button(root, text="Dark Mode", command=darkmode).pack()

show_login_or_signup()
root.mainloop()
